"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var broadcaster_service_1 = require("../broadcast/broadcaster.service");
var localstorage_service_1 = require("../localstorage/localstorage.service");
var CountDownTimer = (function () {
    function CountDownTimer(broadcaster, LocalStorage) {
        this.broadcaster = broadcaster;
        this.LocalStorage = LocalStorage;
        this.counter = 5;
        this.SERVICE = "[CountDownTimer]";
        this.DEBUG = false;
        this.DEFAUTLS = {
            counter: 60,
            interval: 1000
        };
        this.properties = {
            id: "CountDownTimer",
            counter: this.DEFAUTLS.counter,
            interval: this.DEFAUTLS.interval,
            last_updated: new Date(),
            orig_data: this.DEFAUTLS,
        };
    }
    CountDownTimer.prototype.init = function (_properties) {
        this.LocalStorage.setId(_properties.id || this.properties.id);
        // Do we have something stored in LocalStorage ?
        var timer_storage = this.LocalStorage.get();
        if (timer_storage) {
            // We have an old timer, lets check its existance
            this.properties = timer_storage;
        }
        else {
            // Was a custom properties requested ?
            if (_properties) {
                Object.assign(this.properties, _properties);
            }
            // Create a new Timer
            this.properties.orig_data = {
                counter: this.properties.counter,
                interval: this.properties.interval,
            };
        }
        if (this.DEBUG) {
            console.warn(this.SERVICE, "New Timer Has Been Created");
        }
        this.save();
    };
    // Private Functions
    CountDownTimer.prototype.$timeout = function (interval) {
        var _this = this;
        if (!interval) {
            interval = this.properties.interval;
        }
        return setTimeout(function () {
            _this._timerCtrl();
        }, interval);
    };
    CountDownTimer.prototype._timerCtrl = function () {
        if (this.properties.counter > 0) {
            this._timer = this.$timeout();
            this.properties.last_updated = new Date();
            this.properties.counter--;
            // Save data to LocalStorage
            this.save();
        }
        else {
            // Raise an exception, our timer has ended
            this.broadcaster.broadcast('CountDownTimerEndEvent', this.properties);
        }
    };
    CountDownTimer.prototype.save = function () {
        // Save all data into Storage
        var DEBUG = this.DEBUG;
        var SERVICE = this.SERVICE;
        if (DEBUG) {
            console.log(SERVICE, "[save] properties=", this.properties);
        }
        this.LocalStorage.set(this.properties);
        this.broadcaster.broadcast('CountDownTimerChangeEvent', this.properties);
    };
    // Public functions    
    CountDownTimer.prototype.getInfo = function () {
        return this.properties;
    };
    CountDownTimer.prototype.getCounter = function () {
        return this.properties.counter;
    };
    CountDownTimer.prototype.getLastUpdate = function () {
        return new Date(this.properties.last_updated);
    };
    CountDownTimer.prototype.setDebug = function (to) {
        this.DEBUG = to;
    };
    CountDownTimer.prototype.start = function () {
        var interval = this.properties.interval;
        clearTimeout(this._timer);
        this._timer = this.$timeout();
        if (this.DEBUG) {
            console.log(this.SERVICE, "[start] starting with interval:", interval);
        }
    };
    CountDownTimer.prototype.stop = function () {
        clearTimeout(this._timer);
        if (this.DEBUG) {
            console.log(this.SERVICE, "[stop]");
        }
    };
    CountDownTimer.prototype.update = function (key, value) {
        // Update global properties
        this.properties[key] = value;
        this.properties.orig_data[key] = value;
        this.save();
    };
    CountDownTimer.prototype.restart = function () {
        var original_props = this.properties.orig_data;
        if (this.DEBUG) {
            console.log(this.SERVICE, "[restart] original counter:", original_props.counter);
        }
        Object.assign(this.properties, original_props);
        this.save();
        clearTimeout(this._timer);
    };
    CountDownTimer.prototype.destory = function () {
        // Removing the timer from LS
        var timer_id = this.properties.id;
        if (timer_id) {
            if (this.DEBUG) {
                console.log(this.SERVICE, "[remove] Removing timer", timer_id);
            }
            this.LocalStorage.destory();
        }
    };
    return CountDownTimer;
}());
CountDownTimer = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [broadcaster_service_1.Broadcaster, localstorage_service_1.LocalStorageService])
], CountDownTimer);
exports.CountDownTimer = CountDownTimer;
//# sourceMappingURL=timer.service.js.map